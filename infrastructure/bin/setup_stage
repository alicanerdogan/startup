#!/usr/bin/node

const readline = require("readline");
const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

const promisifyRL = (fn) => {
  return (...args) =>
    new Promise((resolve) => fn(...args, (result) => resolve(result)));
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const askQuestion = promisifyRL(rl.question.bind(rl));

function copyRecursiveSync(src, dest, replaceFilename = (_src, dest) => dest) {
  const exists = fs.existsSync(src);
  const stats = exists && fs.statSync(src);
  const isDirectory = exists && stats.isDirectory();
  if (!isDirectory) {
    fs.copyFileSync(src, replaceFilename(src, dest));
    return;
  }
  fs.mkdirSync(replaceFilename(src, dest), { recursive: true });
  fs.readdirSync(src).forEach(function (childItemName) {
    copyRecursiveSync(
      path.join(src, childItemName),
      path.join(dest, childItemName),
      replaceFilename
    );
  });
}
const APP_NAME_PLACEHOLDER = "[#_APP_NAME_#]";
const STAGE_NAME_PLACEHOLDER = "[#_STAGE_NAME_#]";

const [, scriptPath] = process.argv;
const rootDir = path.join(scriptPath, "..", "..");
const stageRootDir = path.join(rootDir, "env");
const templateStageDir = path.join(stageRootDir, "stage");

function getTargetStageDir(stageName) {
  return path.join(stageRootDir, stageName);
}

function scaffoldStageEnvironmentFiles(appName, stageName) {
  const targetStageDir = getTargetStageDir(stageName);
  copyRecursiveSync(templateStageDir, targetStageDir, (_src, dest) => {
    if (!dest.endsWith("_stage.tf")) {
      return dest;
    }
    return dest.replace("_stage.tf", `_${stageName}.tf`);
  });
  const resp = execSync(`find ${targetStageDir} -type f`);
  const tfFiles = resp.toString().trim().split("\n");
  for (const tfFile of tfFiles) {
    execSync(`sed -i 's/\\[#_APP_NAME_#\\]/${appName}/g' ${tfFile}`);
    execSync(`sed -i 's/\\[#_STAGE_NAME_#\\]/${stageName}/g' ${tfFile}`);
  }
}

function scaffoldBuildScript(stageName) {
  const stageRootDir = getTargetStageDir(stageName);
  const binRootDir = path.join(scriptPath, "..");

  const stageResourceDir = path.relative(binRootDir, stageRootDir);
  const buildScriptTemplate = `#!/bin/bash
BASEDIR=$(dirname "$0")
cd $BASEDIR

set -e

(cd "${stageResourceDir}" && terraform init && terraform apply -var "domain_certificate_arn=$DOMAIN_CERTIFICATE_ARN" -var "base_domain=$BASE_DOMAIN" -var "subdomain=$SUBDOMAIN"  -var "db_password=$DB_PASSWORD" -var "db_username=$DB_USERNAME"  -var "public_ssh_key=$PUBLIC_SSH_KEY" -auto-approve)

PORT=$(cd "${stageResourceDir}" && terraform output server_port)
DB=$(cd "${stageResourceDir}" && terraform output db_name)
DB_PORT=$(cd "${stageResourceDir}" && terraform output db_port)
DB_ADDRESS=$(cd "${stageResourceDir}" && terraform output db_address)

cd "../../server"

echo "{
  \\"port\\": $PORT,
  \\"db\\": \\"$DB\\",
  \\"db_port\\": $DB_PORT,
  \\"db_address\\": \\"$DB_ADDRESS\\",
  \\"db_username\\": \\"$DB_USERNAME\\",
  \\"db_password\\": \\"$DB_PASSWORD\\"
}" > src/config.prod.json
`;

  const stageBuildScriptPath = path.join(binRootDir, `build_${stageName}`);
  fs.writeFileSync(stageBuildScriptPath, buildScriptTemplate, { mode: 0o764 });
}

function scaffoldServerDeployScript(appName, stageName) {
  const deployScriptTemplate = `#!/bin/bash
BASEDIR=$(dirname "$0")
cd $BASEDIR

BUILD_REVISION=$(git rev-parse --short HEAD)
BUILD_FILE="build_\${BUILD_REVISION}.zip"
CODEDEPLOY_APP_NAME=$(cd ../env/${stageName} && terraform output app_name)
DEPLOYMENT_BUCKET_NAME=$(cd ../env/${stageName} && terraform output deployment_bucket)
BUILD_FILE_S3_KEY="revisions/$BUILD_FILE"
BUILD_FILE_S3_PATH="s3://$DEPLOYMENT_BUCKET_NAME/$BUILD_FILE_S3_KEY"

cd "../../server"

zip -q -r $BUILD_FILE . -x './.git/*' -x './node_modules/*'
aws s3 cp $BUILD_FILE $BUILD_FILE_S3_PATH
rm -f $BUILD_FILE
DEPLOYMENT_ID=$(aws deploy create-deployment --application-name $CODEDEPLOY_APP_NAME --deployment-group-name deployment_group_${appName}-${stageName} --revision "{\\"revisionType\\":\\"S3\\",\\"s3Location\\":{\\"bucket\\":\\"$DEPLOYMENT_BUCKET_NAME\\",\\"key\\": \\"$BUILD_FILE_S3_KEY\\",\\"bundleType\\":\\"zip\\"}}" --output text --no-paginate)
aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
`;

  const binRootDir = path.join(scriptPath, "..");
  const stageDeployScriptPath = path.join(binRootDir, `deploy_${stageName}`);
  fs.writeFileSync(stageDeployScriptPath, deployScriptTemplate, {
    mode: 0o764,
  });
}

function scaffoldClientDeployScript(stageName) {
  const deployScriptTemplate = `#!/bin/bash
BASEDIR=$(dirname "$0")
cd $BASEDIR

CDN_BUCKET_NAME=$(cd ../env/${stageName} && terraform output s3_id)
BUILD_FILE_S3_PATH="s3://$CDN_BUCKET_NAME"

cd "../../client/dist"

aws s3 cp ./ $BUILD_FILE_S3_PATH --recursive --acl public-read
`;

  const binRootDir = path.join(scriptPath, "..");
  const stageDeployScriptPath = path.join(
    binRootDir,
    `deploy_client_${stageName}`
  );
  fs.writeFileSync(stageDeployScriptPath, deployScriptTemplate, {
    mode: 0o764,
  });
}

(async function () {
  try {
    const appName = await askQuestion(
      "What is the name of your application?\n"
    );
    const stageName = await askQuestion(
      "What is the name of your stage environment? e.g: dev, staging, production\n"
    );

    scaffoldBuildScript(stageName);
    scaffoldServerDeployScript(appName, stageName);
    scaffoldClientDeployScript(stageName);
    scaffoldStageEnvironmentFiles(appName, stageName);
  } catch (error) {
    console.error({ error });
  }
  rl.close();
})();
